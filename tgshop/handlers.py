from asgiref.sync import sync_to_async
from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonCommands, BotCommand, MenuButtonDefault
from aiogram.filters.command import Command as AiogramCommand
from aiogram import F
from tgshop.models.settings import TelegramSettings
from tgshop.models.operators import Operator
from tgshop.models.product import Product
from tgshop.models.cart import CartItem
from tgshop.keyboards import (
    main_keyboard, 
    catalog_keyboard, 
    create_keyboard, 
    create_product_keyboard,
    cancel_keyboard,
    create_cart_keyboard,
    create_cart_item_keyboard
)
from tgshop.models.categories import Category
import os
from django.conf import settings
import logging
from tgshop.services.customer import CustomerService
from aiogram.fsm.context import FSMContext
from tgshop.states import AddToCartStates
from tgshop.services.cart import CartService

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_states = {}  # user_id: last_catalog_message_id

async def start_command(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start """
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    customer_service = CustomerService()
    customer, created = await sync_to_async(customer_service.get_or_create_customer)(
        telegram_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ–Ω—é (—Å–∫—Ä—ã–≤–∞–µ–º)
    await message.bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonDefault()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
    await message.bot.delete_my_commands()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º" if not created else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"{greeting}, {message.from_user.first_name}! üëã\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", 
        reply_markup=main_keyboard
    )

async def handle_catalog(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ç–∞–ª–æ–≥'"""
    await delete_catalog_if_exists(message)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        catalog_message = await message.answer(
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",
            reply_markup=catalog_keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        catalog_states[message.from_user.id] = catalog_message.message_id
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=main_keyboard)

async def delete_catalog_if_exists(message: types.Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    if message.from_user.id in catalog_states:
        try:
            await message.bot.delete_message(
                message.chat.id,
                catalog_states[message.from_user.id]
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        del catalog_states[message.from_user.id]

async def handle_cart(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ—Ä–∑–∏–Ω–∞'"""
    await delete_catalog_if_exists(message)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customer_service = CustomerService()
        customer = await sync_to_async(customer_service.get_customer)(message.from_user.id)
        
        if not customer:
            await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        cart_service = CartService()
        cart = await sync_to_async(cart_service.get_cart)(customer)
        
        if not cart or not await sync_to_async(lambda: cart.items.exists())():
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_keyboard)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        cart_items = await sync_to_async(list)(cart.items.select_related('product').all())
        
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        
        for item in cart_items:
            product = item.product
            item_cost = item.quantity * product.price
            total += item_cost
            
            cart_text += (
                f"‚Ä¢ {product.name}\n"
                f"  {item.quantity} x {product.price}‚ÇΩ = {item_cost}‚ÇΩ\n"
            )
        
        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
        cart_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
        cart_keyboard = create_cart_keyboard(cart_items)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            cart_text, 
            reply_markup=cart_keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=main_keyboard
        )

async def handle_shippay(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞'"""
    await delete_catalog_if_exists(message)
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"üì¶ {settings.ship_pay}")

async def handle_bonus(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'"""
    await delete_catalog_if_exists(message)
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"ÔøΩÔøΩ {settings.bonus}")    

async def handle_operator(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"""
    await delete_catalog_if_exists(message)
    operator = await sync_to_async(Operator.load)()
    await message.answer(f"–ù–∞—à —á–∞–π–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –í–∞–º –ø–æ–º–æ–∂–µ—Ç:\n @{operator.username}")

async def handle_about(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –º–∞–≥–∞–∑–∏–Ω–µ'"""
    await delete_catalog_if_exists(message)
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"üì¶ {settings.about}")

async def handle_any_message(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    current_state = await state.get_state()
    if current_state is not None:
        return  # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ–Ω—é
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    customer_service = CustomerService()
    customer = await sync_to_async(customer_service.get_customer)(message.from_user.id)
    
    if not customer:
        # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        customer, _ = await sync_to_async(customer_service.get_or_create_customer)(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    
    await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=main_keyboard)

async def handle_catalog_menu(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É' """
    print(catalog_keyboard)
    await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",reply_markup=catalog_keyboard)

async def product_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
    await callback.message.delete()
    
    product_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    product = await sync_to_async(Product.objects.select_related('category').get)(id=product_id)
    images = await sync_to_async(list)(product.images.all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    product_text = (
        f"üì¶ *{product.name}*\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ"
        f"{' –∑–∞ –≥—Ä–∞–º–º' if product.price_type == 'gram' else ''}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product.dis_product}\n\n"
    )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    product_keyboard = create_product_keyboard(product_id)
    
    if images:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–æ–∂–∫—É
            cover_image = next((img for img in images if img.is_cover), images[0])
            cover_path = os.path.join(settings.MEDIA_ROOT, str(cover_image.image))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –æ–±–ª–æ–∂–∫—É)
            other_images = [img for img in images if img != cover_image]
            
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∞–ª—å–±–æ–º–æ–º
            if other_images:
                media_group = []
                for image in other_images:
                    image_path = os.path.join(settings.MEDIA_ROOT, str(image.image))
                    media_group.append(InputMediaPhoto(media=FSInputFile(image_path)))
                await callback.message.answer_media_group(media=media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await callback.message.answer_photo(
                photo=FSInputFile(cover_path),
                caption=product_text,
                reply_markup=product_keyboard,
                parse_mode="Markdown"
            )
            
        except FileNotFoundError as e:
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            await callback.message.answer(
                text=f"{product_text}\n\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=product_keyboard,
                parse_mode="Markdown"
            )
    else:
        await callback.message.answer(
            text=product_text,
            reply_markup=product_keyboard,
            parse_mode="Markdown"
        )

async def back_to_category_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[3])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    current_category = await sync_to_async(Category.objects.get)(id=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_keyboard = await sync_to_async(create_keyboard)(category_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}",
        reply_markup=category_keyboard
    )

async def catalog_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await callback.message.delete()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if callback.data == "category_main":
        await callback.message.answer(
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",
            reply_markup=catalog_keyboard
        )
        return

    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—è
    current_category = await sync_to_async(Category.objects.get)(id=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    temp_keyboard = await sync_to_async(create_keyboard)(category_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}", 
        reply_markup=temp_keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def command_1(message: types.Message):
    await handle_catalog(message)

async def command_2(message: types.Message):
    await handle_cart(message)

async def command_3(message: types.Message):
    await handle_shippay(message)

async def command_4(message: types.Message):
    await handle_bonus(message)

async def command_5(message: types.Message):
    await handle_operator(message)

async def command_6(message: types.Message):
    await handle_about(message)

async def handle_quantity_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        quantity_message_id = data.get('quantity_message_id')
        category_id = data.get('category_id')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity_message_id:
            try:
                await message.bot.delete_message(message.chat.id, quantity_message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category_id:
            current_category = await sync_to_async(Category.objects.get)(id=category_id)
            category_keyboard = await sync_to_async(create_keyboard)(category_id)
            await message.answer(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}",
                reply_markup=main_keyboard  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            catalog_message = await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                reply_markup=category_keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_states[message.from_user.id] = catalog_message.message_id
        
        await state.clear()
        return

    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
        data = await state.get_data()
        product_id = data.get('product_id')
        category_id = data.get('category_id')
        quantity_message_id = data.get('quantity_message_id')
        
        if not product_id:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ç–æ–≤–∞—Ä–∞")
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        product = await sync_to_async(Product.objects.get)(id=product_id)
        customer = await sync_to_async(CustomerService.get_customer)(message.from_user.id)
        
        if not customer:
            raise ValueError("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_service = CartService()
        await sync_to_async(cart_service.add_product)(
            customer=customer,
            product=product,
            quantity=quantity
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart = await sync_to_async(cart_service.get_cart)(customer)
        cart_items = await sync_to_async(list)(cart.items.select_related('product').all())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
        message_text = (
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n"
            f"‚Ä¢ {product.name} - {quantity} —à—Ç. √ó {product.price}‚ÇΩ = {quantity * product.price}‚ÇΩ\n\n"
            f"üõí –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã:\n"
        )
        
        total = 0
        for item in cart_items:
            item_cost = item.quantity * item.product.price
            total += item_cost
            message_text += f"‚Ä¢ {item.product.name} - {item.quantity} —à—Ç. √ó {item.product.price}‚ÇΩ = {item_cost}‚ÇΩ\n"
        
        message_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity_message_id:
            try:
                await message.bot.delete_message(message.chat.id, quantity_message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—Ä–∑–∏–Ω–µ
        await message.answer(
            message_text,
            reply_markup=main_keyboard
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if category_id:
            current_category = await sync_to_async(Category.objects.get)(id=category_id)
            category_keyboard = await sync_to_async(create_keyboard)(category_id)
            catalog_message = await message.answer(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}",
                reply_markup=category_keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_states[message.from_user.id] = catalog_message.message_id
        
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=cancel_keyboard
        )
        await state.clear()

async def add_to_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        parts = callback.data.split("_")
        product_id = int(parts[-1])
        
        product = await sync_to_async(Product.objects.get)(id=product_id)
        category_id = await sync_to_async(lambda: product.category.id)()
        
        await state.update_data(product_id=product_id)
        await state.update_data(category_id=category_id)
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ç–æ–≤–∞—Ä–æ–º
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –º–µ–Ω—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ cancel_keyboard
        msg = await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=cancel_keyboard  # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ cancel_keyboard
        )
        
        await state.update_data(quantity_message_id=msg.message_id)
        await state.set_state(AddToCartStates.waiting_for_quantity)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

async def edit_cart_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        item_id = int(callback.data.split("_")[2])
        cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(id=item_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"cart_decrease_{item_id}"),
                InlineKeyboardButton(text=str(cart_item.quantity), callback_data="ignore"),
                InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"cart_increase_{item_id}")
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_remove_{item_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="back_to_cart")]
        ])
        
        await callback.message.edit_text(
            f"üõí {cart_item.product.name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.quantity} —à—Ç\n"
            f"–¶–µ–Ω–∞ –∑–∞ —à—Ç: {cart_item.product.price}‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ: {cart_item.quantity * cart_item.product.price}‚ÇΩ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def cart_increase_callback(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        item_id = int(callback.data.split("_")[2])
        cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(id=item_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item.quantity += 1
        await sync_to_async(cart_item.save)()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(id=item_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"cart_decrease_{item_id}"),
                InlineKeyboardButton(text=str(cart_item.quantity), callback_data="ignore"),
                InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"cart_increase_{item_id}")
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_remove_{item_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="back_to_cart")]
        ])
        
        await callback.message.edit_text(
            f"üõí {cart_item.product.name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.quantity} —à—Ç\n"
            f"–¶–µ–Ω–∞ –∑–∞ —à—Ç: {cart_item.product.price}‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ: {cart_item.quantity * cart_item.product.price}‚ÇΩ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def cart_decrease_callback(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        item_id = int(callback.data.split("_")[2])
        cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(id=item_id)
        
        if cart_item.quantity > 1:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_item.quantity -= 1
            await sync_to_async(cart_item.save)()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cart_item = await sync_to_async(CartItem.objects.select_related('product').get)(id=item_id)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"cart_decrease_{item_id}"),
                    InlineKeyboardButton(text=str(cart_item.quantity), callback_data="ignore"),
                    InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"cart_increase_{item_id}")
                ],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"cart_remove_{item_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="back_to_cart")]
            ])
            
            await callback.message.edit_text(
                f"üõí {cart_item.product.name}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.quantity} —à—Ç\n"
                f"–¶–µ–Ω–∞ –∑–∞ —à—Ç: {cart_item.product.price}‚ÇΩ\n"
                f"–ò—Ç–æ–≥–æ: {cart_item.quantity * cart_item.product.price}‚ÇΩ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            await callback.answer("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå", show_alert=True)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def cart_remove_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        item_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –∫–æ—Ä–∑–∏–Ω—É
        get_item = sync_to_async(CartItem.objects.select_related('product', 'cart').get)
        cart_item = await get_item(id=item_id)
        cart = cart_item.cart
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ sync_to_async —Å lambda
        delete_item = sync_to_async(lambda: CartItem.objects.filter(id=item_id).delete())
        await delete_item()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ sync_to_async —Å lambda
        get_items = sync_to_async(lambda: list(cart.items.select_related('product').all()))
        cart_items = await get_items()
        
        if not cart_items:
            await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        
        for item in cart_items:
            product = item.product
            item_cost = item.quantity * product.price
            total += item_cost
            cart_text += (
                f"‚Ä¢ {product.name}\n"
                f"  {item.quantity} x {product.price}‚ÇΩ = {item_cost}‚ÇΩ\n"
            )
        
        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
        cart_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        cart_keyboard = create_cart_keyboard(cart_items)
        
        await callback.message.edit_text(
            cart_text,
            reply_markup=cart_keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def back_to_cart_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        customer = await sync_to_async(CustomerService.get_customer)(callback.from_user.id)
        cart_service = CartService()
        cart = await sync_to_async(cart_service.get_cart)(customer)
        cart_items = await sync_to_async(list)(cart.items.select_related('product').all())
        
        if not cart_items:
            await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        
        for item in cart_items:
            product = item.product
            item_cost = item.quantity * product.price
            total += item_cost
            cart_text += (
                f"‚Ä¢ {product.name}\n"
                f"  {item.quantity} x {product.price}‚ÇΩ = {item_cost}‚ÇΩ\n"
            )
        
        cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
        cart_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
        
        cart_keyboard = create_cart_keyboard(cart_items)
        await callback.message.edit_text(cart_text, reply_markup=cart_keyboard)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–æ—Ä–∑–∏–Ω–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def clear_cart_callback(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—É
        customer = await sync_to_async(CustomerService.get_customer)(callback.from_user.id)
        cart_service = CartService()
        cart = await sync_to_async(cart_service.get_cart)(customer)
        
        if cart:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            await sync_to_async(cart.items.all().delete)()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
            await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        else:
            await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)

def register_handlers(dp: Dispatcher):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ """
    dp.message.register(start_command, AiogramCommand(commands=["start"]))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(command_1, AiogramCommand(commands=["1"]))
    dp.message.register(command_2, AiogramCommand(commands=["2"]))
    dp.message.register(command_3, AiogramCommand(commands=["3"]))
    dp.message.register(command_4, AiogramCommand(commands=["4"]))
    dp.message.register(command_5, AiogramCommand(commands=["5"]))
    dp.message.register(command_6, AiogramCommand(commands=["6"]))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(handle_catalog, F.text == "–ö–∞—Ç–∞–ª–æ–≥")
    dp.message.register(handle_cart, F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
    dp.message.register(handle_shippay, F.text == "–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞")
    dp.message.register(handle_bonus, F.text == "–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    dp.message.register(handle_operator, F.text == "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    dp.message.register(handle_about, F.text == "–û –º–∞–≥–∞–∑–∏–Ω–µ")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(catalog_callback_handler, F.data.startswith("category_"))
    dp.callback_query.register(product_callback_handler, F.data.startswith("product_"))
    dp.callback_query.register(handle_catalog_menu, F.data == "catalog_menu")
    dp.callback_query.register(back_to_category_handler, F.data.startswith("back_to_category_"))
    dp.callback_query.register(add_to_cart_callback, F.data.startswith("add_to_cart_"))
    dp.callback_query.register(edit_cart_callback, F.data.startswith("edit_cart_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    dp.callback_query.register(cart_increase_callback, F.data.startswith("cart_increase_"))
    dp.callback_query.register(cart_decrease_callback, F.data.startswith("cart_decrease_"))
    dp.callback_query.register(cart_remove_callback, F.data.startswith("cart_remove_"))
    dp.callback_query.register(back_to_cart_callback, F.data == "back_to_cart")
    dp.callback_query.register(clear_cart_callback, F.data == "clear_cart")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    dp.message.register(handle_quantity_input, AddToCartStates.waiting_for_quantity)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–º
    dp.message.register(handle_any_message)