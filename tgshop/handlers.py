from asgiref.sync import sync_to_async
from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonCommands, BotCommand, MenuButtonDefault
from aiogram.filters.command import Command as AiogramCommand
from aiogram import F
from tgshop.models.settings import TelegramSettings
from tgshop.models.operators import Operator
from tgshop.models.product import Product
from tgshop.keyboards import main_keyboard, catalog_keyboard, create_keyboard, create_product_keyboard
from tgshop.models.categories import Category
import os
from django.conf import settings
import logging

async def start_command(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ–Ω—é (—Å–∫—Ä—ã–≤–∞–µ–º)
    await message.bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonDefault()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
    await message.bot.delete_my_commands()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", 
        reply_markup=main_keyboard
    )

async def handle_catalog(message: types.Message):
    await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",reply_markup=catalog_keyboard)

async def handle_cart(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ—Ä–∑–∏–Ω–∞' """
    await message.answer("–ó–¥–µ—Å—å —Ç–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞, —Å —Ç–µ–±—è 5000 —É–∂–µ —Å–ø–∏—Å–∞–ª–∏")

async def handle_shippay(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞' """
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"üì¶ {settings.ship_pay}")

async def handle_bonus(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' """
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"üì¶ {settings.bonus}")    

async def handle_operator(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º' """
    operator = await sync_to_async(Operator.load)()
    await message.answer(f"–ù–∞—à —á–∞–π–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –í–∞–º –ø–æ–º–æ–∂–µ—Ç:\n @{operator.username}")

async def handle_about(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –º–∞–≥–∞–∑–∏–Ω–µ' """
    settings = await sync_to_async(TelegramSettings.load)()
    await message.answer(f"üì¶ {settings.about}")

async def handle_any_message(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é """
    await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=main_keyboard)

async def handle_catalog_menu(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É' """
    print(catalog_keyboard)
    await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",reply_markup=catalog_keyboard)

async def product_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
    await callback.message.delete()
    
    product_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    product = await sync_to_async(Product.objects.select_related('category').get)(id=product_id)
    images = await sync_to_async(list)(product.images.all())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    product_text = (
        f"üì¶ *{product.name}*\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ"
        f"{' –∑–∞ –≥—Ä–∞–º–º' if product.price_type == 'gram' else ''}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product.dis_product}\n\n"
    )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    product_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_category_{product.category.id}")]
    ])
    
    if images:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–æ–∂–∫—É
            cover_image = next((img for img in images if img.is_cover), images[0])
            cover_path = os.path.join(settings.MEDIA_ROOT, str(cover_image.image))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–∏—Å–∫–ª—é—á–∞—è –æ–±–ª–æ–∂–∫—É)
            other_images = [img for img in images if img != cover_image]
            
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∞–ª—å–±–æ–º–æ–º
            if other_images:
                media_group = []
                for image in other_images:
                    image_path = os.path.join(settings.MEDIA_ROOT, str(image.image))
                    media_group.append(InputMediaPhoto(media=FSInputFile(image_path)))
                await callback.message.answer_media_group(media=media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await callback.message.answer_photo(
                photo=FSInputFile(cover_path),
                caption=product_text,
                reply_markup=product_keyboard,
                parse_mode="Markdown"
            )
            
        except FileNotFoundError as e:
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            await callback.message.answer(
                text=f"{product_text}\n\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=product_keyboard,
                parse_mode="Markdown"
            )
    else:
        await callback.message.answer(
            text=product_text,
            reply_markup=product_keyboard,
            parse_mode="Markdown"
        )

async def back_to_category_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[3])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    current_category = await sync_to_async(Category.objects.get)(id=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_keyboard = await sync_to_async(create_keyboard)(category_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}",
        reply_markup=category_keyboard
    )

async def catalog_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await callback.message.delete()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if callback.data == "category_main":
        await callback.message.answer(
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",
            reply_markup=catalog_keyboard
        )
        return

    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—è
    current_category = await sync_to_async(Category.objects.get)(id=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    temp_keyboard = await sync_to_async(create_keyboard)(category_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category.name}", 
        reply_markup=temp_keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def command_1(message: types.Message):
    await handle_catalog(message)

async def command_2(message: types.Message):
    await handle_cart(message)

async def command_3(message: types.Message):
    await handle_shippay(message)

async def command_4(message: types.Message):
    await handle_bonus(message)

async def command_5(message: types.Message):
    await handle_operator(message)

async def command_6(message: types.Message):
    await handle_about(message)

def register_handlers(dp: Dispatcher):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ """
    dp.message.register(start_command, AiogramCommand(commands=["start"]))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(command_1, AiogramCommand(commands=["1"]))
    dp.message.register(command_2, AiogramCommand(commands=["2"]))
    dp.message.register(command_3, AiogramCommand(commands=["3"]))
    dp.message.register(command_4, AiogramCommand(commands=["4"]))
    dp.message.register(command_5, AiogramCommand(commands=["5"]))
    dp.message.register(command_6, AiogramCommand(commands=["6"]))
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(handle_catalog, F.text == "–ö–∞—Ç–∞–ª–æ–≥")
    dp.message.register(handle_cart, F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
    dp.message.register(handle_shippay, F.text == "–û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞")
    dp.message.register(handle_bonus, F.text == "–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    dp.message.register(handle_operator, F.text == "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    dp.message.register(handle_about, F.text == "–û –º–∞–≥–∞–∑–∏–Ω–µ")
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(catalog_callback_handler, F.data.startswith("category_"))
    dp.callback_query.register(product_callback_handler, F.data.startswith("product_"))
    dp.callback_query.register(handle_catalog_menu, F.data == "catalog_menu")
    dp.callback_query.register(back_to_category_handler, F.data.startswith("back_to_category_"))
    dp.message.register(handle_any_message)